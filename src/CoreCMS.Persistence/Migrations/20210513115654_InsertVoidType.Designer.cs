// <auto-generated />
using System;
using CoreCMS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreCMS.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210513115654_InsertVoidType")]
    partial class InsertVoidType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreCMS.Domain.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "7fd2efe6-e036-4004-9a9b-0fdd9a089d03",
                            ConcurrencyStamp = "73820e7b-bc20-458b-a63f-7a1d3a16ea7c",
                            Description = "ผู้ดูแลระบบสูงสุด",
                            Name = "super_admin",
                            NormalizedName = "SUPER_ADMIN",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = "45542588-db7b-4efc-97a7-91f11989d26f",
                            ConcurrencyStamp = "d6822b1d-58cb-4a2a-99ac-77ef5921f7f2",
                            Description = "ผู้ดูแลระบบ",
                            Name = "admin",
                            NormalizedName = "ADMIN",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = "aa2ce0dc-f9fa-4938-9d33-852106fb4993",
                            ConcurrencyStamp = "13930600-8479-4246-9207-fd19983c2c51",
                            Description = "เจ้าของกิจการ",
                            Name = "business_owner",
                            NormalizedName = "BUSINESS_OWNER",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = "21b579c7-038b-4bbb-8d31-f9865ca7861a",
                            ConcurrencyStamp = "68fae768-8964-4571-9d2c-636deb8f0911",
                            Description = "พนักงานดูแลระบบ",
                            Name = "system",
                            NormalizedName = "SYSTEM",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = "afabc5ea-07e3-4021-8026-258c371558ed",
                            ConcurrencyStamp = "52a5441c-1712-492f-a1b6-caa72a3f2117",
                            Description = "สมาชิกระดับ Bronze",
                            Name = "bronze",
                            NormalizedName = "BRONZE",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = "5744dd30-16b8-40ac-9ace-00aca29976ce",
                            ConcurrencyStamp = "b7b930b1-dd68-48a8-8900-2104c63a0674",
                            Description = "สมาชิกระดับ Silver",
                            Name = "silver",
                            NormalizedName = "SILVER",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = "2419e2fd-c635-412d-b689-338ea3f13b32",
                            ConcurrencyStamp = "7f6ae83a-5de8-4b98-bc4c-fea5b2c8ccd8",
                            Description = "สมาชิกระดับ Gold",
                            Name = "gold",
                            NormalizedName = "GOLD",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = "e79a9d4e-4aa6-4046-a065-bb822c9f8258",
                            ConcurrencyStamp = "1e1c0c87-2062-4b20-ab59-9c03e3735879",
                            Description = "สมาชิกระดับ Platinum",
                            Name = "platinum",
                            NormalizedName = "PLATINUM",
                            UserTypeId = 3
                        });
                });

            modelBuilder.Entity("CoreCMS.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("AmphurId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Companyname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConfirmEmailDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateUserDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeCode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("FamilyName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("GivenName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("OpenID")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RandomCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TumbolId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CoreCMS.Domain.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("CoreCMS.Domain.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BookingRunning")
                        .HasColumnType("int");

                    b.Property<string>("BookingStatusCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceQty")
                        .HasColumnType("int");

                    b.Property<string>("PriceTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RoomPriceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookingId");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingNumber")
                        .IsUnique();

                    b.HasIndex("BookingStatusCode");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PaymentMethodCode");

                    b.HasIndex("RoomId");

                    b.HasIndex("RoomPriceId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingDate", b =>
                {
                    b.Property<int>("BookingDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("CloseTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCheckIn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCheckOut")
                        .HasColumnType("bit");

                    b.Property<string>("OpenDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingDateId");

                    b.HasIndex("BookingDateId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingDate");
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingFacility", b =>
                {
                    b.Property<int>("BookingFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("BookingFacilityId");

                    b.HasIndex("BookingFacilityId");

                    b.HasIndex("BookingId");

                    b.HasIndex("FacilityId");

                    b.ToTable("BookingFacility");
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingView", b =>
                {
                    b.Property<int>("BookingDateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingRunning")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatusCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CloseTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("OpenDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlaceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceAmperId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PlaceLatitude")
                        .HasColumnType("real");

                    b.Property<float>("PlaceLongitude")
                        .HasColumnType("real");

                    b.Property<string>("PlaceNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceTambonId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceQty")
                        .HasColumnType("int");

                    b.Property<string>("PriceTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("BookingStatusCode");

                    b.HasIndex("PaymentMethodCode");

                    b.ToTable("BookingView");
                });

            modelBuilder.Entity("CoreCMS.Domain.CheckIn", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckInUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckOutUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CheckInId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CheckInId");

                    b.HasIndex("CheckInUserId");

                    b.HasIndex("CheckOutUserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("CoreCMS.Domain.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName_TH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CoreCMS.Domain.CompanyProfiles", b =>
                {
                    b.Property<int>("CompanyProfilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyProfilesId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("CoreCMS.Domain.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponeDeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("CoreCMS.Domain.Facility", b =>
                {
                    b.Property<Guid>("FacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityName_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityName_TH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FacilityTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacilityId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("FacilityTypeID");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("CoreCMS.Domain.FacilityServices", b =>
                {
                    b.Property<int>("FacilityServicesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacilityServicesId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("FacilityServices");
                });

            modelBuilder.Entity("CoreCMS.Domain.FacilityType", b =>
                {
                    b.Property<int>("FacilityTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacilityTypeName_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacilityTypeName_TH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FacilityTypeID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("FacilityType");
                });

            modelBuilder.Entity("CoreCMS.Domain.HistoryView", b =>
                {
                    b.Property<DateTime>("BookingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BookingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingRunning")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingStatusCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerFirstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerLastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceAmperId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PlaceLatitude")
                        .HasColumnType("real");

                    b.Property<float>("PlaceLongitude")
                        .HasColumnType("real");

                    b.Property<string>("PlaceNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceTambonId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceQty")
                        .HasColumnType("int");

                    b.Property<string>("PriceTimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SystemVariableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("BookingStatusCode");

                    b.HasIndex("PaymentMethodCode");

                    b.ToTable("HistoryView");
                });

            modelBuilder.Entity("CoreCMS.Domain.ImplementationDate", b =>
                {
                    b.Property<int>("ImplementationDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StartDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImplementationDateId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("ImplementationDate");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTDevice", b =>
                {
                    b.Property<int>("IoTDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceTypeCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Dimmer")
                        .HasColumnType("int");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<int>("IoTDeviceGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MongoDeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IoTDeviceId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("DeviceTypeCode");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IoTDeviceGroupId");

                    b.HasIndex("IoTDeviceId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StatusCode");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("IoTDevice");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTDeviceGroup", b =>
                {
                    b.Property<int>("IoTDeviceGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpenPerDevice")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IoTDeviceGroupId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IoTDeviceGroupId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("IoTDeviceGroup");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTTransaction", b =>
                {
                    b.Property<int>("IoTTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("Dimmer")
                        .HasColumnType("int");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<int>("IoTDeviceGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("IoTDeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IoTTransactionId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IoTDeviceGroupId");

                    b.HasIndex("IoTDeviceId");

                    b.HasIndex("IoTTransactionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("StatusCode");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("IoTTransaction");
                });

            modelBuilder.Entity("CoreCMS.Domain.LogNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("ResponeJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SetTimeSend")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NotificationId");

                    b.ToTable("LogNotification");
                });

            modelBuilder.Entity("CoreCMS.Domain.MessageNotification", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("NotificationId");

                    b.ToTable("MessageNotification");
                });

            modelBuilder.Entity("CoreCMS.Domain.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NotiCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotiTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CoreCMS.Domain.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Change")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CounterPaymentCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreditCardTypeCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethodCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PaymentResponseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Receive")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReceiveNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiveRunning")
                        .HasColumnType("int");

                    b.Property<string>("ReceiveUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RefCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Remaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankCode");

                    b.HasIndex("BookingId");

                    b.HasIndex("CounterPaymentCode");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CreditCardTypeCode");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PaymentMethodCode");

                    b.HasIndex("PaymentResponseId");

                    b.HasIndex("ReceiveUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("CoreCMS.Domain.PaymentResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AgentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(12,5)");

                    b.Property<string>("ApprovalCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CardToken")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ChannelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ChannelCodeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Eci")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("FxAmount")
                        .HasColumnType("decimal(12,5)");

                    b.Property<string>("FxCurrencyCode")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("FxRate")
                        .HasColumnType("decimal(12,7)");

                    b.Property<decimal?>("InstallmentMerchantAbsorbRate")
                        .HasColumnType("decimal(12,5)");

                    b.Property<string>("InstallmentPeriod")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("decimal(12,5)");

                    b.Property<string>("InterestType")
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<string>("IssuerCountry")
                        .HasColumnType("nvarchar(2)")
                        .HasMaxLength(2);

                    b.Property<decimal?>("McpAmount")
                        .HasColumnType("decimal(12,5)");

                    b.Property<string>("McpCurrencyCode")
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<decimal?>("McpFxRate")
                        .HasColumnType("decimal(12,7)");

                    b.Property<string>("MerchantID")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Pan")
                        .HasColumnType("nvarchar(19)")
                        .HasMaxLength(19);

                    b.Property<string>("RecurringUniqueID")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("RespCode")
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("RespDesc")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionDateTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<string>("UserDefined1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserDefined2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserDefined3")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserDefined4")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("UserDefined5")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingNumber");

                    b.HasIndex("ChannelCode");

                    b.HasIndex("Id");

                    b.HasIndex("MerchantID");

                    b.HasIndex("RespCode");

                    b.HasIndex("RespDesc");

                    b.ToTable("PaymentResponse");
                });

            modelBuilder.Entity("CoreCMS.Domain.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodeRef")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DownloadUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("FileInfoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GridFsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SysName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TypeRef")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PictureId");

                    b.HasIndex("CodeRef");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("PictureId");

                    b.HasIndex("TypeRef");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("CoreCMS.Domain.Place", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AMPER_ID")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproveCreate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproveDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Latitude")
                        .HasColumnType("real");

                    b.Property<float?>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("NearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PROVINCE_ID")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<string>("PlaceName_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceName_TH")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("PlaceTypeID")
                        .HasColumnType("int");

                    b.Property<string>("SeeingTypeCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubMerchantId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TAMBON_ID")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZIP_CODE")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("PlaceId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("PlaceTypeID");

                    b.HasIndex("SeeingTypeCode");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Place");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlacePaymentMethod", b =>
                {
                    b.Property<int>("PlacePaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlacePaymentMethodId");

                    b.HasIndex("PaymentMethodCode");

                    b.HasIndex("PlaceId");

                    b.HasIndex("PlacePaymentMethodId");

                    b.ToTable("PlacePaymentMethod");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlaceRoomView", b =>
                {
                    b.Property<string>("PlaceAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceAmperId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PlaceLatitude")
                        .HasColumnType("real");

                    b.Property<float>("PlaceLongitude")
                        .HasColumnType("real");

                    b.Property<string>("PlaceNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceNearBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceTambonId")
                        .HasColumnType("int");

                    b.Property<int>("PlaceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomCapacity")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomNameTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PlaceRoomView");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlaceTheme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ThemeId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PlaceId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("PlaceTheme");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlaceType", b =>
                {
                    b.Property<int>("PlaceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PlaceTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PlaceTypeID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("PlaceType");
                });

            modelBuilder.Entity("CoreCMS.Domain.Privilege", b =>
                {
                    b.Property<int>("PrivilegeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PrivilegeTypeCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("PrivilegeId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PlaceId");

                    b.HasIndex("PrivilegeId");

                    b.HasIndex("PrivilegeTypeCode");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Privilege");
                });

            modelBuilder.Entity("CoreCMS.Domain.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Detail_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail_TH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoomName_EN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomName_TH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("CoreCMS.Domain.RoomPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("RoomId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("RoomPrice");
                });

            modelBuilder.Entity("CoreCMS.Domain.RoomType", b =>
                {
                    b.Property<int>("RoomTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoomTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoomTypeNameEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoomTypeID");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("RoomType");
                });

            modelBuilder.Entity("CoreCMS.Domain.SystemVariable", b =>
                {
                    b.Property<string>("SystemVariableCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("Ordering")
                        .HasColumnType("int");

                    b.Property<string>("SystemVariableCategoryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SystemVariableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("SystemVariableCode");

                    b.HasIndex("SystemVariableCategoryCode");

                    b.ToTable("SystemVariables");

                    b.HasData(
                        new
                        {
                            SystemVariableCode = "MEMBER_CLASS_NORMAL",
                            Ordering = 1,
                            SystemVariableCategoryCode = "MEMBER_CLASS",
                            SystemVariableName = "สมาชิกทั่วไป"
                        },
                        new
                        {
                            SystemVariableCode = "MEMBER_CLASS_GOLD",
                            Ordering = 2,
                            SystemVariableCategoryCode = "MEMBER_CLASS",
                            SystemVariableName = "สมาชิกบัตรทอง"
                        },
                        new
                        {
                            SystemVariableCode = "PAYMENT_METHOD_COD",
                            Ordering = 1,
                            SystemVariableCategoryCode = "PAYMENT_METHOD",
                            SystemVariableName = "Pay at the front desk"
                        },
                        new
                        {
                            SystemVariableCode = "PAYMENT_METHOD_ONLINE",
                            Ordering = 2,
                            SystemVariableCategoryCode = "PAYMENT_METHOD",
                            SystemVariableName = "Payment Online"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_RESERVE",
                            Ordering = 1,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "จอง"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_WAITING_FOR_PAYMENT",
                            Ordering = 2,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "รอชำระเงิน"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_PAID",
                            Ordering = 3,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "ชำระเงินแล้ว"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_WAITING_FOR_CHECKIN",
                            Ordering = 4,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = " รอ Check In"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_CHECKIN",
                            Ordering = 5,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "เข้าใช้งาน"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_COMPLETE",
                            Ordering = 6,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "สมบูรณ์"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_CANCEL",
                            Ordering = 7,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "ยกเลิกการจอง"
                        },
                        new
                        {
                            SystemVariableCode = "BOOKING_STATUS_PLACE_CANCEL",
                            Ordering = 8,
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableName = "ถูกยกเลิกการจอง"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_BBL",
                            Ordering = 1,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารกรุงเทพ"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_KBANK",
                            Ordering = 2,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารกสิกรไทย"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_KTB",
                            Ordering = 3,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารกรุงไทย"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_TMB",
                            Ordering = 4,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารทหารไทย"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_SCB",
                            Ordering = 5,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารไทยพาณิชย์"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_BAY",
                            Ordering = 6,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารกรุงศรีอยุธยา"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_KKP",
                            Ordering = 7,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารเกียรตินาคินภัทร"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_CIMBT",
                            Ordering = 8,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารซีไอเอ็มบีไทย"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_TISCO",
                            Ordering = 9,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารทิสโก้"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_TBANK",
                            Ordering = 10,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารธนชาต"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_UOBT",
                            Ordering = 11,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารยูโอบี"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_TCD",
                            Ordering = 12,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารไทยเครดิตเพื่อรายย่อย"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_LHFG",
                            Ordering = 13,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารแลนด์แอนด์ เฮ้าส์"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_BAAC",
                            Ordering = 14,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร"
                        },
                        new
                        {
                            SystemVariableCode = "BANK_GSB",
                            Ordering = 15,
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableName = "ธนาคารออมสิน"
                        },
                        new
                        {
                            SystemVariableCode = "COUNTER_PAYMENT_CASH",
                            Ordering = 1,
                            SystemVariableCategoryCode = "COUNTER_PAYMENT",
                            SystemVariableName = "เงินสด"
                        },
                        new
                        {
                            SystemVariableCode = "COUNTER_PAYMENT_TRANSFER",
                            Ordering = 2,
                            SystemVariableCategoryCode = "COUNTER_PAYMENT",
                            SystemVariableName = "เงินโอน"
                        },
                        new
                        {
                            SystemVariableCode = "COUNTER_PAYMENT_CREDIT_CARD",
                            Ordering = 3,
                            SystemVariableCategoryCode = "COUNTER_PAYMENT",
                            SystemVariableName = "บัตรเครดิต"
                        },
                        new
                        {
                            SystemVariableCode = "CREDIT_CARD_TYPE_VISA",
                            Ordering = 1,
                            SystemVariableCategoryCode = "CREDIT_CARD_TYPE",
                            SystemVariableName = "VISA"
                        },
                        new
                        {
                            SystemVariableCode = "CREDIT_CARD_TYPE_MASTER_CARD",
                            Ordering = 2,
                            SystemVariableCategoryCode = "CREDIT_CARD_TYPE",
                            SystemVariableName = "Master Card"
                        },
                        new
                        {
                            SystemVariableCode = "CREDIT_CARD_TYPE_JCB",
                            Ordering = 3,
                            SystemVariableCategoryCode = "CREDIT_CARD_TYPE",
                            SystemVariableName = "JCB"
                        },
                        new
                        {
                            SystemVariableCode = "CREDIT_CARD_TYPE_OTHER",
                            Ordering = 4,
                            SystemVariableCategoryCode = "CREDIT_CARD_TYPE",
                            SystemVariableName = "อื่นๆ"
                        },
                        new
                        {
                            SystemVariableCode = "IOT_DEVICE_STATUS_ON",
                            Ordering = 1,
                            SystemVariableCategoryCode = "IOT_DEVICE_STATUS",
                            SystemVariableName = "เปิด"
                        },
                        new
                        {
                            SystemVariableCode = "IOT_DEVICE_STATUS_OFF",
                            Ordering = 2,
                            SystemVariableCategoryCode = "IOT_DEVICE_STATUS",
                            SystemVariableName = "ปิด"
                        },
                        new
                        {
                            SystemVariableCode = "IOT_DEVICE_TYPE_LIGHT",
                            Ordering = 1,
                            SystemVariableCategoryCode = "IOT_DEVICE_TYPE",
                            SystemVariableName = "ไฟ"
                        },
                        new
                        {
                            SystemVariableCode = "IOT_DEVICE_TYPE_PLUG",
                            Ordering = 2,
                            SystemVariableCategoryCode = "IOT_DEVICE_TYPE",
                            SystemVariableName = "ปลั๊ก"
                        },
                        new
                        {
                            SystemVariableCode = "PRIVILEGE_TYPE_DOMAIN",
                            Ordering = 1,
                            SystemVariableCategoryCode = "PRIVILEGE_TYPE",
                            SystemVariableName = "โดเมน"
                        },
                        new
                        {
                            SystemVariableCode = "PRIVILEGE_TYPE_PERSON",
                            Ordering = 2,
                            SystemVariableCategoryCode = "PRIVILEGE_TYPE",
                            SystemVariableName = "ผู้ใช้งาน"
                        },
                        new
                        {
                            SystemVariableCode = "SEEING_TYPE_PUBLIC",
                            Ordering = 1,
                            SystemVariableCategoryCode = "SEEING_TYPE",
                            SystemVariableName = "Public"
                        },
                        new
                        {
                            SystemVariableCode = "SEEING_TYPE_PRIVATE",
                            Ordering = 2,
                            SystemVariableCategoryCode = "SEEING_TYPE",
                            SystemVariableName = "Private"
                        },
                        new
                        {
                            SystemVariableCode = "SEEING_TYPE_PRIVATE_ONLY",
                            Ordering = 3,
                            SystemVariableCategoryCode = "SEEING_TYPE",
                            SystemVariableName = "Private Only"
                        },
                        new
                        {
                            SystemVariableCode = "THEME_TYPE_LOGO_LIGHT",
                            Ordering = 1,
                            SystemVariableCategoryCode = "THEME_TYPE",
                            SystemVariableName = "รูปโลโก้แบบสว่าง"
                        },
                        new
                        {
                            SystemVariableCode = "THEME_TYPE_LOGO_DARK",
                            Ordering = 2,
                            SystemVariableCategoryCode = "THEME_TYPE",
                            SystemVariableName = "รูปโลโก้แบบมืด"
                        },
                        new
                        {
                            SystemVariableCode = "THEME_TYPE_BG_LIGHT",
                            Ordering = 3,
                            SystemVariableCategoryCode = "THEME_TYPE",
                            SystemVariableName = "รูปพื้นหลังแบบสว่าง"
                        },
                        new
                        {
                            SystemVariableCode = "THEME_TYPE_BG_DARK",
                            Ordering = 4,
                            SystemVariableCategoryCode = "THEME_TYPE",
                            SystemVariableName = "รูปพื้นหลังแบบมืด"
                        },
                        new
                        {
                            SystemVariableCode = "VOID_TYPE_IN_PROGRESS",
                            Ordering = 1,
                            SystemVariableCategoryCode = "VOID_TYPE",
                            SystemVariableName = "อยู่ระหว่างดำเนินการ"
                        },
                        new
                        {
                            SystemVariableCode = "VOID_TYPE_REFUNDED",
                            Ordering = 2,
                            SystemVariableCategoryCode = "VOID_TYPE",
                            SystemVariableName = "คืนเงิน"
                        });
                });

            modelBuilder.Entity("CoreCMS.Domain.SystemVariableCategory", b =>
                {
                    b.Property<string>("SystemVariableCategoryCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SystemVariableCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("SystemVariableCategoryCode");

                    b.ToTable("SystemVariableCategories");

                    b.HasData(
                        new
                        {
                            SystemVariableCategoryCode = "MEMBER_CLASS",
                            SystemVariableCategoryName = "ระดับบัตรสมาชิก"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "PAYMENT_METHOD",
                            SystemVariableCategoryName = "วิธีการชำระเงิน"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "BOOKING_STATUS",
                            SystemVariableCategoryName = "สถานะการจอง"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "BANK",
                            SystemVariableCategoryName = "ธนาคาร"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "COUNTER_PAYMENT",
                            SystemVariableCategoryName = "วิธีชำระเงินหน้าเค้าท์เตอร์"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "CREDIT_CARD_TYPE",
                            SystemVariableCategoryName = "ประเภทบัตรเครดิต"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "IOT_DEVICE_STATUS",
                            SystemVariableCategoryName = "สถานะของอุปกรณ์"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "IOT_DEVICE_TYPE",
                            SystemVariableCategoryName = "ประเภทของอุปกรณ์"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "PRIVILEGE_TYPE",
                            SystemVariableCategoryName = "ประเภทของสิทธิพิเศษ"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "SEEING_TYPE",
                            SystemVariableCategoryName = "ประเภทการมองเห็น"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "THEME_TYPE",
                            SystemVariableCategoryName = "ประเภทของธีม"
                        },
                        new
                        {
                            SystemVariableCategoryCode = "VOID_TYPE",
                            SystemVariableCategoryName = "ประเภทการคืนเงิน"
                        });
                });

            modelBuilder.Entity("CoreCMS.Domain.TermAndCondition", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TermEN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermTH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TermId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedUserId");

                    b.ToTable("TermAndCondition");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserConsent", b =>
                {
                    b.Property<int>("UserConsentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PersistedGrantsKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserConsentId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("PersistedGrantsKey");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TermId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserConsentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConsent");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserConsentPersistedGrantsView", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PersistedGrantsKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TermId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserConsentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("UserConsentPersistedGrantsView");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserSearchView", b =>
                {
                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateUserDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogOnDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OpenID")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.ToTable("UserSearchView");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserTheme", b =>
                {
                    b.Property<int>("UserThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ThemeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserThemeId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("InActiveStatus");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserThemeId");

                    b.ToTable("UserTheme");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("UserTypeId");

                    b.HasIndex("NormalizedName");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserType");

                    b.HasData(
                        new
                        {
                            UserTypeId = 1,
                            Description = "ผู้ดูแลระบบ",
                            InActiveStatus = false,
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            UserTypeId = 2,
                            Description = "ร้านค้า",
                            InActiveStatus = false,
                            Name = "shop",
                            NormalizedName = "SHOP"
                        },
                        new
                        {
                            UserTypeId = 3,
                            Description = "สมาชิกทั่วไป",
                            InActiveStatus = false,
                            Name = "general_member",
                            NormalizedName = "GENERAL_MEMBER"
                        },
                        new
                        {
                            UserTypeId = 4,
                            Description = "ผู้ใช้งานทั่วไป (Guest)",
                            InActiveStatus = false,
                            Name = "guest",
                            NormalizedName = "GUEST"
                        },
                        new
                        {
                            UserTypeId = 5,
                            Description = "นิติบุคคล, องค์กรเอกชน, องค์กร์ภาครัฐ",
                            InActiveStatus = false,
                            Name = "juristic",
                            NormalizedName = "JURISTIC"
                        });
                });

            modelBuilder.Entity("CoreCMS.Domain.WishlistUserMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("InActiveStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWishlist")
                        .HasColumnType("bit");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeletedUserId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UpdatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistUserMapping");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1312f09c-4010-429d-89cf-c6742832eec9",
                            RoleId = "7fd2efe6-e036-4004-9a9b-0fdd9a089d03"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoreCMS.Domain.ApplicationRole", b =>
                {
                    b.HasOne("CoreCMS.Domain.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Badge", b =>
                {
                    b.HasOne("CoreCMS.Domain.Device", "Device")
                        .WithMany("Badge")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.Booking", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariable", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.RoomPrice", "RoomPrice")
                        .WithMany()
                        .HasForeignKey("RoomPriceId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingDate", b =>
                {
                    b.HasOne("CoreCMS.Domain.Booking", "Booking")
                        .WithMany("BookingDates")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingFacility", b =>
                {
                    b.HasOne("CoreCMS.Domain.Booking", "Booking")
                        .WithMany("BookingFacilities")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.BookingView", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariable", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusCode");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode");
                });

            modelBuilder.Entity("CoreCMS.Domain.CheckIn", b =>
                {
                    b.HasOne("CoreCMS.Domain.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CheckInUser")
                        .WithMany()
                        .HasForeignKey("CheckInUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CheckOutUser")
                        .WithMany()
                        .HasForeignKey("CheckOutUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Company", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.CompanyProfiles", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("CoreCMS.Domain.Company", "Company")
                        .WithMany("CompanyProfiles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Device", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.Facility", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.FacilityType", "FacilityType")
                        .WithMany()
                        .HasForeignKey("FacilityTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.FacilityServices", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany("FacilityServices")
                        .HasForeignKey("PlaceId");

                    b.HasOne("CoreCMS.Domain.Room", "Room")
                        .WithMany("FacilityServices")
                        .HasForeignKey("RoomId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.FacilityType", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.HistoryView", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariable", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusCode");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode");
                });

            modelBuilder.Entity("CoreCMS.Domain.ImplementationDate", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany("ImplementationDate")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTDevice", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeCode");

                    b.HasOne("CoreCMS.Domain.IoTDeviceGroup", "IoTDeviceGroup")
                        .WithMany("IoTDevices")
                        .HasForeignKey("IoTDeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.SystemVariable", "DeviceStatus")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTDeviceGroup", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.IoTTransaction", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.IoTDeviceGroup", "IoTDeviceGroup")
                        .WithMany()
                        .HasForeignKey("IoTDeviceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.IoTDevice", "IoTDevice")
                        .WithMany()
                        .HasForeignKey("IoTDeviceId");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "IoTDeviceStatus")
                        .WithMany()
                        .HasForeignKey("StatusCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.LogNotification", b =>
                {
                    b.HasOne("CoreCMS.Domain.Device", "Device")
                        .WithMany("LogNotification")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.Notification", "Notification")
                        .WithMany("LogNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.MessageNotification", b =>
                {
                    b.HasOne("CoreCMS.Domain.Notification", "Notification")
                        .WithMany("Messages")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.Notification", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.Payment", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariable", "Bank")
                        .WithMany()
                        .HasForeignKey("BankCode");

                    b.HasOne("CoreCMS.Domain.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.SystemVariable", "CounterPayment")
                        .WithMany()
                        .HasForeignKey("CounterPaymentCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "CreditCardType")
                        .WithMany()
                        .HasForeignKey("CreditCardTypeCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.SystemVariable", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.PaymentResponse", "PaymentResponse")
                        .WithMany()
                        .HasForeignKey("PaymentResponseId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "ReceiveUser")
                        .WithMany()
                        .HasForeignKey("ReceiveUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.PaymentResponse", b =>
                {
                    b.HasOne("CoreCMS.Domain.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.Picture", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Place", b =>
                {
                    b.HasOne("CoreCMS.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.PlaceType", "PlaceType")
                        .WithMany("Place")
                        .HasForeignKey("PlaceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.SystemVariable", "SeeingType")
                        .WithMany()
                        .HasForeignKey("SeeingTypeCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlacePaymentMethod", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariable", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodCode");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany("PlacePaymentMethods")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.PlaceTheme", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.PlaceType", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Privilege", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany("Privileges")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.SystemVariable", "PrivilegeType")
                        .WithMany()
                        .HasForeignKey("PrivilegeTypeCode");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.Room", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany("Room")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.RoomPrice", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Room", "Room")
                        .WithMany("RoomPrice")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.RoomType", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.SystemVariable", b =>
                {
                    b.HasOne("CoreCMS.Domain.SystemVariableCategory", "SystemVariableCategory")
                        .WithMany()
                        .HasForeignKey("SystemVariableCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreCMS.Domain.TermAndCondition", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserConsent", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.TermAndCondition", "TermAndCondition")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserConsentPersistedGrantsView", b =>
                {
                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.TermAndCondition", "TermAndCondition")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.UserTheme", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.PlaceTheme", "PlaceTheme")
                        .WithMany()
                        .HasForeignKey("ThemeId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CoreCMS.Domain.WishlistUserMapping", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "DeletedUser")
                        .WithMany()
                        .HasForeignKey("DeletedUserId");

                    b.HasOne("CoreCMS.Domain.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "UpdatedUser")
                        .WithMany()
                        .HasForeignKey("UpdatedUserId");

                    b.HasOne("CoreCMS.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreCMS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoreCMS.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
